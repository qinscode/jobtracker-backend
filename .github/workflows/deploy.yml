name: Build and Deploy JobTracker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_ENVIRONMENT: 'Production'
  DOCKER_IMAGE_NAME: 'job-tracker-api'
  DOCKER_REGISTRY: 'ghcr.io'
  GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Environment Validation
        run: |
          required_secrets=("DB_HOST" "DB_USERNAME" "DB_PASSWORD" "DB_DATABASE" "API_PORT" 
                           "JWT_SECRET" "JWT_ISSUER" "JWT_AUDIENCE" "GOOGLE_CLIENT_ID" 
                           "GOOGLE_SECRET" "GEMINI_API_KEY" "GEMINI_API_ENDPOINT")
          
          missing_secrets=()
          for secret in "${required_secrets[@]}"; do
            if [ -z "${{ secrets[format('{0}', secret)] }}" ]; then
              missing_secrets+=("$secret")
            fi
          done
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

      - name: Configuration Setup
        run: |
          cat appsettings.json | \
          sed "s/#{DB_HOST}/${{ secrets.DB_HOST }}/g" | \
          sed "s/#{DB_USERNAME}/${{ secrets.DB_USERNAME }}/g" | \
          sed "s/#{DB_PASSWORD}/${{ secrets.DB_PASSWORD }}/g" | \
          sed "s/#{JWT_SECRET}/${{ secrets.JWT_SECRET }}/g" | \
          sed "s/#{JWT_ISSUER}/${{ secrets.JWT_ISSUER }}/g" | \
          sed "s/#{JWT_AUDIENCE}/${{ secrets.JWT_AUDIENCE }}/g" | \
          sed "s/#{GOOGLE_CLIENT_ID}/${{ secrets.GOOGLE_CLIENT_ID }}/g" | \
          sed "s/#{GOOGLE_SECRET}/${{ secrets.GOOGLE_SECRET }}/g" | \
          sed "s/#{GEMINI_API_KEY}/${{ secrets.GEMINI_API_KEY }}/g" | \
          sed "s/#{GEMINI_API_ENDPOINT}/${{ secrets.GEMINI_API_ENDPOINT }}/g" | \
          sed "s/#{DB_DATABASE}/${{ secrets.DB_DATABASE }}/g" > appsettings.Production.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image digest ${{ steps.meta.outputs.digest }}"

      - name: Deploy to Development Environment
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          echo "Deploying to development environment..."
          # Add deployment commands here if you're deploying to your own infrastructure
          # For example, SSH commands or API calls to your deployment platform

      - name: Clean up
        if: always()
        run: |
          rm -f appsettings.Production.json
          echo "Cleaned up sensitive files"